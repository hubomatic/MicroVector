name: "MicroVector CI"

on:
  push:
    branches: '*'
    tags: '*'
  schedule:
    # run at 6AM & 6PM UTC
    - cron:  '0 6,18 * * *'

jobs:
  Build:
    env:
      ORG_NAME: hubomatic
      REPO_NAME: MicroVector
      APP_NAME: MicroVector
      TEST_NAME: MicroVector
      CONFIGURATION: Release

    runs-on: macos-latest
    environment: Signing
    timeout-minutes: 15 # small projects should be quick

    steps:
      - name: "Cancel Previous Runs"
        uses: styfle/cancel-workflow-action@0.8.0
        with:
          access_token: ${{ github.token }}

      - name: "Checkout Project"
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 # https://github.com/actions/checkout/issues/100
          submodules: true

      # cannot test until macos-11.0 is available in GitHub Actions
      #- name: Framework Tests
      #  run: xcodebuild test -scheme ${{ env.TEST_NAME }}
      #- name: App Tests
      #  run: xcodebuild test -scheme ${{ env.APP_NAME }}

      # Ensure Info.plist has:
      # <key>CFBundleShortVersionString</key>
      # <string>$(MARKETING_VERSION)</string>
      # <key>CFBundleVersion</key>
      # <string>$(PRODUCT_VERSION)</string>

      # Set steps.taginfo.outputs.tagname to current release
      - name: "Set release from tag"
        id: taginfo
        run: echo ::set-output name=tagname::${GITHUB_REF#refs/*/}
        
      # Set steps.revinfo.outputs.buildnumber to current rev-list count
      - name: "Set build number from rev-list"
        id: revinfo
        run: echo "::set-output name=buildnumber::$(git rev-list --count ${{ steps.taginfo.outputs.tagname }})"

      - name: "Configure Export"
        run: |
          mkdir -p Export/
          #echo '<plist version="1.0"><dict><key>method</key><string>developer-id</string><key>teamID</key><string>${{ secrets.TEAM_ID }}</string></dict></plist>' > "Export/${{ env.APP_NAME }}ExportOptions.plist"
          echo '<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:sparkle="http://www.andymatuschak.org/xml-namespaces/sparkle"><channel><item><enclosure sparkle:version="${{ steps.revinfo.outputs.buildnumber }}" sparkle:shortVersionString="${{ steps.taginfo.outputs.tagname }}" url="https://github.com/${{ env.ORG_NAME }}/${{ env.REPO_NAME }}/releases/download/${{ steps.taginfo.outputs.tagname }}/${{ env.APP_NAME }}.zip"></enclosure></item></channel></rss>' > Export/appcast.xml
          xmllint --format Export/appcast.xml # ensure appcast is valid

      - name: "Build Archive"
        run:
          xcodebuild archive -configuration "${{ env.CONFIGURATION }}" -scheme "${{ env.APP_NAME }}" -archivePath "Export/${{ env.APP_NAME }}.xcarchive" COMPILER_INDEX_STORE_ENABLE="NO" MARKETING_VERSION="${{ steps.taginfo.outputs.tagname }}" PRODUCT_VERSION="${{ steps.revinfo.outputs.buildnumber }}" CURRENT_PROJECT_VERSION="${{ steps.revinfo.outputs.buildnumber }}"

      - name: "HubOMat"
        uses: hubomatic/hubomat@0.0.48
        with:
          verbose: true
          staple: true
          timeout: 120 # minutes
          team-id: ${{ secrets.TEAM_ID }}
          export-path: "Export/"
          archive-path: "Export/${{ env.APP_NAME }}.xcarchive"
          product-path: "Export/${{ env.APP_NAME }}.app"
          artifact-path: "Export/${{ env.APP_NAME }}.zip"
          keychain-password: ${{ secrets.KEYCHAIN_PASSWORD }}
          certificate-data: ${{ secrets.DISTRIBUTION_CERTIFICATE_DATA }}
          certificate-passphrase: ${{ secrets.DISTRIBUTION_CERTIFICATE_PASSPHRASE }}
          appstore-connect-username: ${{ secrets.NOTARIZATION_USERNAME }}
          appstore-connect-password: ${{ secrets.NOTARIZATION_PASSWORD }}

      - name: "Upload Build Artifact Zip"
        uses: actions/upload-artifact@v2
        with:
          name: Build
          path: Export/${{ env.APP_NAME }}.zip
          if-no-files-found: error
          
      - name: "Create Release for tag"
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            CHANGELOG.md
            Export/appcast.xml
            Export/${{ env.APP_NAME }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

